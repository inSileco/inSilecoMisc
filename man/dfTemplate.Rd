% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dfTemplate.R
\name{dfTemplate}
\alias{dfTemplate}
\alias{dfTemplateMatch}
\title{Create a data frame from scratch or based on one or two data frames}
\usage{
dfTemplate(cols, nrows = 1, col_classes = NULL, fill = NA)

dfTemplateMatch(x, y, yonly = FALSE, order = FALSE, ...)
}
\arguments{
\item{cols}{either a number of column or a vector of character used as
columns names of the data frame to be returned.}

\item{nrows}{row number.}

\item{col_classes}{vector of column classes for the desired data frame.
By default, the class is determined by \code{fill}.}

\item{fill}{character or number used to fill out the columns. Default is \code{NA}.}

\item{x}{a data frame.}

\item{y}{a data frame or a vector of strings use to specifies column names to be included in the data frame.}

\item{yonly}{a logical. Should only \code{y} (or the \code{names(y)}) be used for the
data frame to be returned? Default is set to \code{FALSE} meaning that both the
names of \code{x} and the names of \code{y} are used.}

\item{order}{a logical. Should column of the output data frame be ordered
according to the template. Not that if there are more columns in \code{x} that
are not in \code{y}, then if \code{order = TRUE} column of \code{y} will be added first
(on the left of the output data frame).}

\item{...}{further arguments to be passed to \code{dfTemplate()}.}
}
\value{
Returns a data frame with the desired characteristics.
}
\description{
This function handles the creation of data frames based on intuitive
parameters. It was originally designed to make row binding easier when
columns differs among data frame by creating data frames with the same
columns.
}
\section{Functions}{
\itemize{
\item \code{dfTemplateMatch}: Returns a data frame that includes all columns specifies in \code{y}.
}}

\examples{
dfTemplate(5, 2)
dfTemplate(5, 2, col_classes = "character")
dfA <- data.frame(col1 = c(1, 2), col2 = LETTERS[1:2])
dfB <- data.frame(col4 = c(1, 2), col2 = LETTERS[1:2])
dfTemplateMatch(dfA, c("col4", "col2"))
dfTemplateMatch(dfA, c("col4", "col2"), yonly = TRUE)
dfTemplateMatch(dfA, dfB, yonly = TRUE, order = TRUE)
}
\references{
\url{https://insileco.github.io/2019/02/03/creating-empty-data-frames-with-dftemplate-and-dftemplatematch/}
}
